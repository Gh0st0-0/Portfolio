package com.app.ghost.controller;

import java.time.LocalDate;
import java.util.List;

import javax.transaction.Transactional;

import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.app.ghost.model.ProjectImages;
import com.app.ghost.model.Projects;
import com.app.ghost.service.CandidateService;
import com.app.ghost.service.ProjectImageService;
import com.app.ghost.service.ProjectService;

import lombok.extern.slf4j.Slf4j;

@Slf4j
@RestController
@CrossOrigin("*")
@Transactional
public class ProjectController implements ImpProjectController {

	private CandidateService candSer;
	private ProjectService projServ;
	private ProjectImageService imgServ;

	public ProjectController(CandidateService candSer, ProjectService projServ, ProjectImageService imgServ) {
		this.candSer = candSer;
		this.projServ = projServ;
		this.imgServ = imgServ;
	}

	@Override
	public boolean ProjectPersist(Projects proj, long cand_id) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public Projects updateProject(Projects proj) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Projects fetchProjectByID(long proj_id) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<Projects> fetchAllProjects(long cand_id) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Projects removeProject(long cand_id, long proj_id) { 
		// first remove image and unlink image : setImages = null
		// 
		Projects proj = this.projServ.findProjectById(proj_id);
		if(proj != null) {
			log.info("Project located to be deleted", proj);
			for(ProjectImages pi : proj.getImages()) {
				this.imgServ.removeImage(pi.getId());
			}
			proj.setImages(null); 
			if(this.candSer.unlinkProject(this.projServ.deleteProjectById(proj_id), cand_id)) {
				log.info("Unlinked the project with the candidate", proj);
				return this.projServ.deleteProjectById(proj_id);
			}else {
				log.error("Failed to unlink the project from the candidate", proj);
			}
		}else {
			log.error("Failed to locate the project to be deleted", proj);
			return proj;
		}
	}

	@Override
	@PostMapping("/project/getProject/{proj_id}")
	public boolean addImage(@PathVariable long proj_id,@RequestBody ProjectImages pi) {
		Projects proj = this.projServ.findProjectById(proj_id);
		if(proj != null) {
			log.info("Fetched project with the project id: " + proj_id, LocalDate.now(), proj);
			if(proj.addImage(this.imgServ.addImage(pi))) {
				log.info("Image Added to the database and linked with te project successfully", LocalDate.now(), pi);
				return true;
			}else {
				log.error("Project image not persisted/ Failed to link: ", pi );
			}
		}else {
			log.error("Failed to locate the project with the id " + proj_id, proj);
		}
		return false;
	}

	@Override
	@PostMapping("/project/getProject/{proj_id}/getImage/{img_id}")
	public boolean removeImage(@PathVariable long proj_id,@PathVariable long img_id) {
		Projects proj = this.projServ.findProjectById(proj_id);
		if(proj != null) {
			if(proj.removeImage(this.imgServ.removeImage(img_id))) {
				log.info("Image Removed from the project successfully", proj);
				return true;
			}else {
				log.error("Failed to unlink the image from the project: ", proj);
				return false;
				
			}
		}else {
			log.error("Failed to fetch the project to unlink the image: ", proj);
			return false;
		}
	}

}
