<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Spring]]></title><description><![CDATA[Level up your Java code and explore what Spring can do for you.]]></description><link>https://spring.io</link><generator>GatsbyJS</generator><lastBuildDate>Fri, 30 Jun 2023 11:10:07 GMT</lastBuildDate><item><title><![CDATA[Spring Cloud 2021.0.8 (aka Jubilee) Is Available]]></title><link>https://spring.io/blog/2023/06/30/spring-cloud-2021-0-8-aka-jubilee-is-available</link><guid isPermaLink="true">https://spring.io/blog/2023/06/30/spring-cloud-2021-0-8-aka-jubilee-is-available</guid><dc:creator><![CDATA[Marcin Grzejszczak]]></dc:creator><pubDate>Fri, 30 Jun 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On behalf of the community, I am pleased to announce that the General Availability (RELEASE) of the &lt;a href=&quot;https://cloud.spring.io&quot;&gt;Spring Cloud 2021.0.8&lt;/a&gt; Release Train is available today. The release can be found in &lt;a href=&quot;https://repo1.maven.org/maven2/org/springframework/cloud/spring-cloud-dependencies/2021.0.8/&quot;&gt;Maven Central&lt;/a&gt;. You can check out the 2021.0.8 &lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-2021.0-Release-Notes&quot;&gt;release notes for more information&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Notable Changes in the 2021.0.8 release&lt;/h2&gt;
&lt;h3&gt;Spring Cloud Commons&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Spring Cloud LoadBalancer - allow chain filtering of instances based on requests (&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-commons/issues/1227&quot;&gt;#1227 &lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;The following modules were updated as part of 2021.0.8:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Module&lt;/th&gt;
&lt;th&gt;Version&lt;/th&gt;
&lt;th&gt;Issues&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Spring Cloud Kubernetes&lt;/td&gt;
&lt;td&gt;2.1.8&lt;/td&gt;
&lt;td&gt;(&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-kubernetes/releases/tag/v2.1.8&quot;&gt;tag&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Spring Cloud Task&lt;/td&gt;
&lt;td&gt;2.4.6&lt;/td&gt;
&lt;td&gt;(&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-task/releases/tag/v2.4.6&quot;&gt;tag&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Spring Cloud Function&lt;/td&gt;
&lt;td&gt;3.2.11&lt;/td&gt;
&lt;td&gt;(&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-function/releases/tag/v3.2.11&quot;&gt;issues&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Spring Cloud Commons&lt;/td&gt;
&lt;td&gt;3.1.7&lt;/td&gt;
&lt;td&gt;(&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-commons/milestone/114?closed=1&quot;&gt;issues&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Spring Cloud Circuitbreaker&lt;/td&gt;
&lt;td&gt;2.1.7&lt;/td&gt;
&lt;td&gt;(&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-circuitbreaker/releases/tag/v2.1.7&quot;&gt;tag&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Spring Cloud Openfeign&lt;/td&gt;
&lt;td&gt;3.1.8&lt;/td&gt;
&lt;td&gt;(&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-openfeign/milestone/63?closed=1&quot;&gt;issues&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Spring Cloud Gateway&lt;/td&gt;
&lt;td&gt;3.1.8&lt;/td&gt;
&lt;td&gt;(&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-gateway/milestone/84?closed=1&quot;&gt;issues&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Spring Cloud Stream&lt;/td&gt;
&lt;td&gt;3.2.9&lt;/td&gt;
&lt;td&gt;(&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-stream/releases/tag/v3.2.9&quot;&gt;tag&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Spring Cloud Contract&lt;/td&gt;
&lt;td&gt;3.1.8&lt;/td&gt;
&lt;td&gt;(&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-contract/milestone/102?closed=1&quot;&gt;issues&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Spring Cloud Config&lt;/td&gt;
&lt;td&gt;3.1.8&lt;/td&gt;
&lt;td&gt;(&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-config/milestone/116?closed=1&quot;&gt;issues&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Spring Cloud Build&lt;/td&gt;
&lt;td&gt;3.1.8&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Spring Cloud Starter Build&lt;/td&gt;
&lt;td&gt;2021.0.8&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Spring Cloud Netflix&lt;/td&gt;
&lt;td&gt;3.1.7&lt;/td&gt;
&lt;td&gt;(&lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-netflix/milestone/123?closed=1&quot;&gt;issues&lt;/a&gt;)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;As always, we welcome feedback on &lt;a href=&quot;https://github.com/spring-cloud/&quot;&gt;GitHub&lt;/a&gt;, on &lt;a href=&quot;https://gitter.im/spring-cloud/spring-cloud&quot;&gt;Gitter&lt;/a&gt;, on &lt;a href=&quot;https://stackoverflow.com/questions/tagged/spring-cloud&quot;&gt;Stack Overflow&lt;/a&gt;, or on &lt;a href=&quot;https://twitter.com/SpringCloud&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Roadmap&lt;/h2&gt;
&lt;p&gt;Please watch our &lt;a href=&quot;https://github.com/orgs/spring-cloud/projects/110&quot;&gt;Github Projects&lt;/a&gt; and &lt;a href=&quot;https://github.com/spring-cloud/spring-cloud-release/milestones?direction=asc&amp;#x26;sort=due_date&amp;#x26;state=open&quot;&gt;Release Milestones&lt;/a&gt; to track our 2021.0 Release Train (aka Jubilee).&lt;/p&gt;
&lt;h2&gt;Getting Started With 2021.0.8&lt;/h2&gt;
&lt;p&gt;To get started with Maven with a BOM (dependency management only):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;
&amp;#x3C;dependencyManagement&gt;
    &amp;#x3C;dependencies&gt;
        &amp;#x3C;dependency&gt;
            &amp;#x3C;groupId&gt;org.springframework.cloud&amp;#x3C;/groupId&gt;
            &amp;#x3C;artifactId&gt;spring-cloud-dependencies&amp;#x3C;/artifactId&gt;
            &amp;#x3C;version&gt;2021.0.8&amp;#x3C;/version&gt;
            &amp;#x3C;type&gt;pom&amp;#x3C;/type&gt;
            &amp;#x3C;scope&gt;import&amp;#x3C;/scope&gt;
        &amp;#x3C;/dependency&gt;
    &amp;#x3C;/dependencies&gt;
&amp;#x3C;/dependencyManagement&gt;
&amp;#x3C;dependencies&gt;
    &amp;#x3C;dependency&gt;
        &amp;#x3C;groupId&gt;org.springframework.cloud&amp;#x3C;/groupId&gt;
        &amp;#x3C;artifactId&gt;spring-cloud-starter-config&amp;#x3C;/artifactId&gt;
    &amp;#x3C;/dependency&gt;
    &amp;#x3C;dependency&gt;
        &amp;#x3C;groupId&gt;org.springframework.cloud&amp;#x3C;/groupId&gt;
        &amp;#x3C;artifactId&gt;spring-cloud-starter-netflix-eureka-client&amp;#x3C;/artifactId&gt;
    &amp;#x3C;/dependency&gt;
    ...
&amp;#x3C;/dependencies&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or with Gradle:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-groovy&quot;&gt;plugins {
  id &apos;java&apos;
  id &apos;org.springframework.boot&apos; version &apos;2.6.15&apos;
  id &apos;io.spring.dependency-management&apos; version &apos;1.1.0&apos;
}

repositories {
  mavenCentral()
}

ext {
  set(&apos;springCloudVersion&apos;, &quot;2021.0.8&quot;)
}

dependencies {
  implementation &apos;org.springframework.cloud:spring-cloud-starter-config&apos;
  implementation &apos;org.springframework.cloud:spring-cloud-starter-netflix-eureka-client&apos;
}

dependencyManagement {
  imports {
    mavenBom &quot;org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;</content:encoded></item><item><title><![CDATA[A Bootiful Podcast: Elastic's Philipp Krenn ]]></title><link>https://spring.io/blog/2023/06/29/a-bootiful-podcast-elastics-philipp-krenn</link><guid isPermaLink="true">https://spring.io/blog/2023/06/29/a-bootiful-podcast-elastics-philipp-krenn</guid><dc:creator><![CDATA[Josh Long]]></dc:creator><pubDate>Thu, 29 Jun 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Hi Spring fans! Welcome to another installment of a Bootiful Podcast! In this installment, &lt;a href=&quot;https://youtube.com/bootiful&quot;&gt;Josh Long&lt;/a&gt; talks to Elastic&apos;s &lt;a href=&quot;https://twitter.com/xeraa&quot;&gt;Philipp Krenn&lt;/a&gt;, live from Spring IO 2023 in beautiful Barcelona, Spain!&lt;/p&gt;
&lt;iframe title=&quot;Elastic’s Philipp Krenn&quot; allowtransparency=&quot;true&quot; height=&quot;150&quot; width=&quot;100%&quot; style=&quot;border: none; min-width: min(100%, 430px);&quot; scrolling=&quot;no&quot; data-name=&quot;pb-iframe-player&quot; src=&quot;https://www.podbean.com/player-v2/?i=7qi8h-144553e-pb&amp;from=pb6admin&amp;share=1&amp;download=1&amp;rtl=0&amp;fonts=Arial&amp;skin=1&amp;font-color=&amp;logo_link=episode_page&amp;btn-skin=7&quot;&gt;&lt;/iframe&gt;</content:encoded></item><item><title><![CDATA[Spring Shell 2.1.11, 3.0.6 and 3.1.2 are now available]]></title><link>https://spring.io/blog/2023/06/28/spring-shell-2-1-11-3-0-6-and-3-1-2-are-now-available</link><guid isPermaLink="true">https://spring.io/blog/2023/06/28/spring-shell-2-1-11-3-0-6-and-3-1-2-are-now-available</guid><dc:creator><![CDATA[Janne Valkealahti]]></dc:creator><pubDate>Wed, 28 Jun 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Spring Shell 2.1.11, 3.0.6 and 3.1.2 are now available&lt;/p&gt;
&lt;p&gt;On behalf of the team and everyone who has contributed, I&apos;m happy to announce that Spring Shell &lt;code&gt;2.1.11&lt;/code&gt;, &lt;code&gt;3.0.6&lt;/code&gt; and &lt;code&gt;3.1.2&lt;/code&gt; has been released and are now available from Maven Central.&lt;/p&gt;
&lt;p&gt;Please see the &lt;a href=&quot;https://github.com/spring-projects/spring-shell/releases/tag/v2.1.11&quot;&gt;release notes 2.1.11&lt;/a&gt;, &lt;a href=&quot;https://github.com/spring-projects/spring-shell/releases/tag/v3.0.6&quot;&gt;release notes 3.0.6&lt;/a&gt; and &lt;a href=&quot;https://github.com/spring-projects/spring-shell/releases/tag/v3.1.2&quot;&gt;release notes 3.1.2&lt;/a&gt; for more details.&lt;/p&gt;
&lt;p&gt;Thanks to all those who have contributed with issue reports and pull requests.&lt;/p&gt;
&lt;h3&gt;How can you help?&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-shell/&quot;&gt;Project Page&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-shell&quot;&gt;GitHub&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-shell/issues&quot;&gt;Issues&lt;/a&gt; | &lt;a href=&quot;https://docs.spring.io/spring-shell/docs/3.1.2/docs/index.html&quot;&gt;Documentation&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Using Spring for GraphQL with Spring Data Neo4j]]></title><link>https://spring.io/blog/2023/06/27/using-spring-for-graphql-with-spring-data-neo4j</link><guid isPermaLink="true">https://spring.io/blog/2023/06/27/using-spring-for-graphql-with-spring-data-neo4j</guid><dc:creator><![CDATA[Mark Paluch]]></dc:creator><pubDate>Tue, 27 Jun 2023 00:00:00 GMT</pubDate><content:encoded>&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;This is a guest blog post by &lt;a href=&quot;https://github.com/meistermeier/&quot;&gt;Gerrit Meier&lt;/a&gt; from &lt;a href=&quot;https://neo4j.com&quot;&gt;Neo4j&lt;/a&gt; who maintain(s) the Spring Data Neo4j module.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A few weeks ago version 1.2.0 of Spring (for) GraphQL was released with a bunch of new features.
This also includes even better integration with Spring Data modules.
Motivated by those changes, more support in Spring Data Neo4j has been added, to give the best experience when using it in combination with Spring GraphQL.
This post will guide you on creating a Spring application with data stored in Neo4j and GraphQL support.
If you are only partial interested in the domain, you can happily skip the next section ;)&lt;/p&gt;
&lt;h2&gt;Domain&lt;/h2&gt;
&lt;p&gt;For this example I have chosen to reach into the Fediverse.
More concrete, to put some &lt;em&gt;Servers&lt;/em&gt; and &lt;em&gt;User&lt;/em&gt; into the focus.
Why the domain was picked up for this, is now for the reader to discover in the following paragraphs.&lt;/p&gt;
&lt;p&gt;The data itself is aligned to the properties that could be fetched from the &lt;a href=&quot;https://docs.joinmastodon.org/&quot;&gt;Mastodon API&lt;/a&gt;.
To keep the data set simple the data was created by hand instead of fetching &lt;em&gt;everything&lt;/em&gt;.
This results into an easier to inspect data set.
The Cypher import statements looks like this:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Cypher import&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-cypher&quot;&gt;CREATE (s1:Server {
 uri:&apos;mastodon.social&apos;, title:&apos;Mastodon&apos;, registrations:true,
 short_description:&apos;The original server operated by the Mastodon gGmbH non-profit&apos;})
CREATE (meistermeier:Account {id:&apos;106403780371229004&apos;, username:&apos;meistermeier&apos;, display_name:&apos;Gerrit Meier&apos;})
CREATE (rotnroll666:Account {id:&apos;109258442039743198&apos;, username:&apos;rotnroll666&apos;, display_name:&apos;Michael Simons&apos;})
CREATE
(meistermeier)-[:REGISTERED_ON]-&gt;(s1),
(rotnroll666)-[:REGISTERED_ON]-&gt;(s1)

CREATE (s2:Server {
 uri:&apos;chaos.social&apos;, title:&apos;chaos.social&apos;, registrations:false,
 short_description:&apos;chaos.social – a Fediverse instance for &amp;#x26; by the Chaos community&apos;})
CREATE (odrotbohm:Account {id:&apos;108194553063501090&apos;, username:&apos;odrotbohm&apos;, display_name:&apos;Oliver Drotbohm&apos;})

CREATE
(odrotbohm)-[:REGISTERED_ON]-&gt;(s2)

CREATE
(odrotbohm)-[:FOLLOWS]-&gt;(rotnroll666),
(odrotbohm)-[:FOLLOWS]-&gt;(meistermeier),
(meistermeier)-[:FOLLOWS]-&gt;(rotnroll666),
(meistermeier)-[:FOLLOWS]-&gt;(odrotbohm),
(rotnroll666)-[:FOLLOWS]-&gt;(meistermeier),
(rotnroll666)-[:FOLLOWS]-&gt;(odrotbohm)

CREATE
(s1)-[:CONNECTED_TO]-&gt;(s2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After running the statement, the graph forms this shape.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Graph view of data set&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/mnrwi97vnhts/2T6pBPlwO4jNUIznjWdEh8/76fe89afd24fa58165a93c7cda375d31/graph_data_set.png&quot; alt=&quot;graph data set&quot;&gt;&lt;/p&gt;
&lt;p&gt;Noticeable information is that even all users follow each others, the Mastodon servers are only connected in one direction.
Users on server &lt;em&gt;chaos.social&lt;/em&gt; cannot search or explore timelines on &lt;em&gt;mastodon.social&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Disclaimer:&lt;/em&gt; The federation of the servers is made up with a non-bidirectional relationship for this example.&lt;/p&gt;
&lt;h2&gt;Components&lt;/h2&gt;
&lt;p&gt;To follow along with the example shown, you should use the following minimum versions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Spring Boot 3.1.1 (which includes the following)
&lt;ul&gt;
&lt;li&gt;Spring Data Neo4j 7.1.1&lt;/li&gt;
&lt;li&gt;Spring GraphQL 1.2.1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Neo4j version 5&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Best is to head over to &lt;a href=&quot;https://start.spring.io&quot;&gt;https://start.spring.io&lt;/a&gt; and create a new project with Spring Data Neo4j and Spring GraphQL dependency.
If you are a little bit lazy, you could also download the empty project from
&lt;a href=&quot;https://start.spring.io/#!type=maven-project&amp;#x26;language=java&amp;#x26;platformVersion=3.1.1&amp;#x26;packaging=jar&amp;#x26;jvmVersion=17&amp;#x26;groupId=com.example.neo4jgraphql&amp;#x26;artifactId=neo4j-graphql&amp;#x26;name=neo4j-graphql&amp;#x26;description=Example%20project%20to%20integrate%20GraphQL%20with%20Neo4j&amp;#x26;packageName=com.example.neo4j-graphql&amp;#x26;dependencies=graphql,data-neo4j&quot;&gt;this link&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To follow along the example 100%, you would need to have Docker installed on your system.
If you don&apos;t have this option or don&apos;t want to use Docker,
you could use either &lt;a href=&quot;https://neo4j.com/download/&quot;&gt;Neo4j Desktop&lt;/a&gt; or the plain &lt;a href=&quot;https://neo4j.com/download-center/#community&quot;&gt;Neo4j Server&lt;/a&gt; artifact for local deployment,
or as hosted options &lt;a href=&quot;https://console.neo4j.io&quot;&gt;Neo4j Aura&lt;/a&gt; or an &lt;a href=&quot;https://neo4j.com/sandbox/&quot;&gt;empty Neo4j Sandbox&lt;/a&gt;.
There will be a note later how to connect to a manual started instance.
The use of the enterprise edition is not necessary and everything works with the community edition.&lt;/p&gt;
&lt;h2&gt;First Spring for GraphQL steps&lt;/h2&gt;
&lt;p&gt;In this example the heavy lifting of configuration will be done by the Spring Boot autoconfiguration.
There is no need to set up the beans manually.
To find out more about what happens behind the scenes, please have a look at the &lt;a href=&quot;https://docs.spring.io/spring-graphql/docs/current/reference/html/&quot;&gt;Spring for GraphQL documentation&lt;/a&gt;.
Later, specific sections of the documentation will be referenced.&lt;/p&gt;
&lt;h2&gt;Entity and Spring Data Neo4j setup&lt;/h2&gt;
&lt;p&gt;First thing to do is to model the domain classes.
As already seen in the import, there are only &lt;code&gt;Servers&lt;/code&gt; and &lt;code&gt;Accounts&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Account domain class&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@Node
public class Account {

	@Id String id;
	String username;
	@Property(&quot;display_name&quot;) String displayName;
	@Relationship(&quot;REGISTERED_ON&quot;) Server server;
	@Relationship(&quot;FOLLOWS&quot;) List&amp;#x3C;Account&gt; following;

	// constructor, etc.
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Given &lt;a href=&quot;https://shkspr.mobi/blog/2022/12/snowflake-ids-in-mastodon-and-unique-ids-in-the-fediverse-more-generally/&quot;&gt;Mastodon&apos;s id strategy for user ids&lt;/a&gt;,&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;it is valid to assume, that the id is (server) unique.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Here and a few lines below in the &lt;code&gt;Server&lt;/code&gt;, &lt;code&gt;@Property&lt;/code&gt; is used to map the database field &lt;em&gt;display_name&lt;/em&gt; to camel-case &lt;em&gt;displayName&lt;/em&gt; in the Java entity.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Server domain class&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@Node
public class Server {

	@Id String uri;
	String title;
	@Property(&quot;registrations&quot;) Boolean registrationsAllowed;
	@Property(&quot;short_description&quot;) String shortDescription;
	@Relationship(&quot;CONNECTED_TO&quot;) List&amp;#x3C;Server&gt; connectedServers;

	// constructor, etc.
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With these entity classes, a &lt;code&gt;AccountRepository&lt;/code&gt; can be created.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Account repository&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@GraphQlRepository
public interface AccountRepository extends Neo4jRepository&amp;#x3C;Account, String&gt; { }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Details why this annotation is used will follow later. Here for completeness of the interface.&lt;/p&gt;
&lt;p&gt;To connect to the Neo4j instance, the connection parameters needs to be added to the &lt;em&gt;application.properties&lt;/em&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-properties&quot;&gt;spring.neo4j.uri=neo4j://localhost:7687
spring.neo4j.authentication.username=neo4j
spring.neo4j.authentication.password=verysecret
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If not happened yet, the database can be started and the Cypher statement from above run to set up the data.
In a later part of this article, &lt;a href=&quot;https://michael-simons.github.io/neo4j-migrations/&quot;&gt;Neo4j-Migrations&lt;/a&gt; will get used to be sure that the database is always in the desired state.&lt;/p&gt;
&lt;h2&gt;Spring for GraphQL setup&lt;/h2&gt;
&lt;p&gt;Before looking into the integration features of Spring Data and Spring for GraphQL,
the application will get set up with a &lt;code&gt;@Controller&lt;/code&gt; stereotype annotated class.
The controller will get registered by Spring for GraphQL as a &lt;code&gt;DataFetcher&lt;/code&gt; for the query &lt;em&gt;accounts&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@Controller
class AccountController {

    private final AccountRepository repository;

    AccountController(AccountRepository repository) {
            this.repository = repository;
    }

    @QueryMapping
    List&amp;#x3C;Account&gt; accounts() {
            return repository.findAll();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Defining a GraphQL schema, that defines not only our entities but also the query with the same name as
the method in the controller (&lt;em&gt;accounts&lt;/em&gt;).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type Query {
    accounts: [Account]!
}
type Account {
    id: ID!
    username: String!
    displayName: String!
    server: Server!
    following: [Account]
    lastMessage: String!
}

type Server {
    uri: ID!
    title: String!
    shortDescription: String!
    connectedServers: [Server]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Also, to browse the GraphQL data in an easy way, GraphiQL should be enabled in the &lt;em&gt;application.properties&lt;/em&gt;.
This is a helpful tool during development time.
Usually this should be disabled for production deployment.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-properties&quot;&gt;spring.graphql.graphiql.enabled=true
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;First run&lt;/h2&gt;
&lt;p&gt;If everything is set up as described above, the application can be started with &lt;code&gt;./mvnw spring-boot:run&lt;/code&gt;.
Browsing to &lt;a href=&quot;http://localhost:8080/graphiql?path=/graphql&quot;&gt;http://localhost:8080/graphiql?path=/graphql&lt;/a&gt; will present the GraphiQL explorer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Querying in GraphiQL&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/mnrwi97vnhts/2KWCeki2SceR3mbQnYE8Ob/9c3566cb612f5c8d8188d58050a95f84/graphiql.png&quot; alt=&quot;graphiql&quot;&gt;&lt;/p&gt;
&lt;p&gt;To verify that the &lt;code&gt;accounts&lt;/code&gt; method is working, a GraphQL request is sent to the application.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;First GraphQL request&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  accounts {
    username
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and the expected answer gets returned from the server.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;GraphQL response&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;data&quot;: {
    &quot;accounts&quot;: [
      {
        &quot;username&quot;: &quot;meistermeier&quot;
      },
      {
        &quot;username&quot;: &quot;rotnroll666&quot;
      },
      {
        &quot;username&quot;: &quot;odrotbohm&quot;
      }
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Of course the method in the controller can be tweaked by adding parameters for respecting arguments with &lt;code&gt;@Argument&lt;/code&gt;
or getting the requested fields (here &lt;em&gt;accounts.username&lt;/em&gt;) to squeeze down the amount of data that gets transported
over the network.
In the previous example, the repository will fetch all properties for the given domain entity, including all relationships.
This data will get mostly discarded to return only the &lt;em&gt;username&lt;/em&gt; to the user.&lt;/p&gt;
&lt;p&gt;This example should give an impression of what can be done with &lt;a href=&quot;https://docs.spring.io/spring-graphql/docs/current/reference/html/#controllers&quot;&gt;Annotated Controllers&lt;/a&gt;.
Adding the query generation and mapping capabilities of Spring Data Neo4j a (simple) GraphQL application was created.&lt;/p&gt;
&lt;p&gt;But at this point both libraries seem to live in parallel in this application and not yet like an integration.
How can SDN and Spring for GraphQL get &lt;em&gt;really&lt;/em&gt; combined?&lt;/p&gt;
&lt;h2&gt;Spring Data Neo4j GraphQL integration&lt;/h2&gt;
&lt;p&gt;As a first step, the &lt;code&gt;accounts&lt;/code&gt; method from the &lt;code&gt;AccountController&lt;/code&gt; can be deleted.
Restarting the application and querying it again with the request from above will still bring up the same result.&lt;/p&gt;
&lt;p&gt;This works because Spring for GraphQL recognizes the result type (array of) &lt;code&gt;Account&lt;/code&gt; from the GraphQL schema.
It scans for eligible Spring Data repositories that matches the type.
Those repositories have to extend the &lt;code&gt;QueryByExampleExecutor&lt;/code&gt; or &lt;code&gt;QuerydslPredicateExecutor&lt;/code&gt; (not part of this blog post) for the given type.
In this example, the &lt;code&gt;AccountRepository&lt;/code&gt; is already implicitly marked as &lt;code&gt;QueryByExampleExecutor&lt;/code&gt; because it is extending the &lt;code&gt;Neo4jRespository&lt;/code&gt;, that is already defining the executor.
The &lt;code&gt;@GraphQlRepository&lt;/code&gt; annotation makes Spring for GraphQL aware that this repository can and should be used for the queries, if possible.&lt;/p&gt;
&lt;p&gt;Without any changes to the actual code, a second &lt;em&gt;Query field&lt;/em&gt; can be defined in the schema.
This time it should filter the results by username.
A username looks unique at the first glance but in the Fediverse this is only true for a given instance.
Multiple instances could have the very same usernames in place.
To respect this behaviour, the query should be able to return an array of &lt;code&gt;Accounts&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The documentation about &lt;a href=&quot;https://docs.spring.io/spring-data/commons/docs/current/reference/html/#query-by-example&quot;&gt;query by example (Spring Data commons)&lt;/a&gt; provides more details
about the inner workings of this mechanism.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Updated query type&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type Query {
    account(username: String!): [Account]!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Restarting the app will now present the option to add a username interactively as a parameter to the query.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Query for an array of the same username&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  account(username: &quot;meistermeier&quot;) {
    username
    following {
      username
      server {
        uri
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Obviously, there is only one &lt;code&gt;Account&lt;/code&gt; with this username.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Response for query by username&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;data&quot;: {
    &quot;account&quot;: [
      {
        &quot;username&quot;: &quot;meistermeier&quot;,
        &quot;following&quot;: [
          {
            &quot;username&quot;: &quot;rotnroll666&quot;,
            &quot;server&quot;: {
              &quot;uri&quot;: &quot;mastodon.social&quot;
            }
          },
          {
            &quot;username&quot;: &quot;odrotbohm&quot;,
            &quot;server&quot;: {
              &quot;uri&quot;: &quot;chaos.social&quot;
            }
          }
        ]
      }
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Behind the scenes Spring for GraphQL adds the field as a parameter to the object that gets passed to the repositories as an example.
Spring Data Neo4j then inspects the example and creates matching conditions for the Cypher query, executes it and sends the result back to Spring GraphQL
for further processing to shape the result into the right response format.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(schematic) API call flow&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;//images.ctfassets.net/mnrwi97vnhts/51rmOX116rFhpDaLfnoVjW/dd70e1b9be57c92a6ebca18ffa16c421/example_flow.png&quot; alt=&quot;example flow&quot;&gt;&lt;/p&gt;
&lt;h2&gt;Pagination&lt;/h2&gt;
&lt;p&gt;Although the example data set is not this huge, it&apos;s often useful to have a proper functionality in place that allows to request the resulting data in chunks.
Spring for GraphQL uses the &lt;a href=&quot;https://relay.dev/graphql/connections.htm&quot;&gt;Cursor Connections specification&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A complete schema specification with all types looks like this.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Schema with cursor connections&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;type Query {
    accountScroll(username:String, first: Int, after: String, last: Int, before:String): AccountConnection
}
type AccountConnection {
    edges: [AccountEdge]!
    pageInfo: PageInfo!
}

type AccountEdge {
    node: Account!
    cursor: String!
}

type PageInfo {
    hasPreviousPage: Boolean!
    hasNextPage: Boolean!
    startCursor: String
    endCursor: String
}
type Account {
    id: ID!
    username: String!
    displayName: String!
    server: Server!
    following: [Account]
    lastMessage: String!
}

type Server {
    uri: ID!
    title: String!
    shortDescription: String!
    connectedServers: [Server]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Even though I personally like to have a complete valid schema, it is possible to skip all the &lt;em&gt;Cursor Connections&lt;/em&gt; specific parts in the definition.
Just the query with the &lt;code&gt;AccountConnection&lt;/code&gt; definition is sufficient for Spring for GraphQL to derive and fill in the missing bits.
The parameters read as following&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;first&lt;/code&gt;: the amount of data to fetch if there is no default&lt;/li&gt;
&lt;li&gt;&lt;code&gt;after&lt;/code&gt;: scroll position after the data should be fetched&lt;/li&gt;
&lt;li&gt;&lt;code&gt;last&lt;/code&gt;: the amount of data to fetch before the &lt;code&gt;before&lt;/code&gt; position&lt;/li&gt;
&lt;li&gt;&lt;code&gt;before&lt;/code&gt;: scroll position until (exclusive) the data should be fetched&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One question remains:
In which order is the result set returned?
A stable sort order is a &lt;em&gt;must&lt;/em&gt; in this scenario, otherwise there is no guarantee that the database returns the data in a predictable order.
The repository needs also to extend the &lt;code&gt;QueryByExampleDataFetcher.QueryByExampleBuilderCustomizer&lt;/code&gt; and implement the &lt;code&gt;customize&lt;/code&gt; method.
In there it is also possible to add the default limit for the query, in this case &lt;em&gt;1&lt;/em&gt; to show the pagination in action.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Added sort ordering (and limit)&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@GraphQlRepository
interface AccountRepository extends Neo4jRepository&amp;#x3C;Account, String&gt;,
       QueryByExampleDataFetcher.QueryByExampleBuilderCustomizer&amp;#x3C;Account&gt;
{

	@Override
	default QueryByExampleDataFetcher.Builder&amp;#x3C;Account, ?&gt; customize(QueryByExampleDataFetcher.Builder&amp;#x3C;Account, ?&gt; builder) {
		return builder.sortBy(Sort.by(&quot;username&quot;))
				.defaultScrollSubrange(new ScrollSubrange(ScrollPosition.offset(), 1, true));
	}

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the application has restarted, it is now possible to call the first pagination query.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pagination for the first element&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  accountScroll {
    edges {
      node {
        username
      }
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To get also the metadata for further interaction, some parts of the &lt;code&gt;pageInfo&lt;/code&gt; got also requested.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Result for the first element&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  &quot;data&quot;: {
    &quot;accountScroll&quot;: {
      &quot;edges&quot;: [
        {
          &quot;node&quot;: {
            &quot;username&quot;: &quot;meistermeier&quot;
          }
        }
      ],
      &quot;pageInfo&quot;: {
        &quot;hasNextPage&quot;: true,
        &quot;endCursor&quot;: &quot;T18x&quot;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now the &lt;code&gt;endCursor&lt;/code&gt; can be used for the next interaction.
Querying the application with this as the value for &lt;em&gt;after&lt;/em&gt; and with a limit of 2...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Pagination for the last element&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  accountScroll(after:&quot;T18x&quot;, first: 2) {
    edges {
      node {
        username
      }
    }
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;...results in the last element(s).
Also, the marker that there is no next page (&lt;code&gt;hasNextPage=false&lt;/code&gt;) indicates that the pagination reached the end of the data set.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Result for the last element&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;data&quot;: {
    &quot;accountScroll&quot;: {
      &quot;edges&quot;: [
        {
          &quot;node&quot;: {
            &quot;username&quot;: &quot;odrotbohm&quot;
          }
        },
        {
          &quot;node&quot;: {
            &quot;username&quot;: &quot;rotnroll666&quot;
          }
        }
      ],
      &quot;pageInfo&quot;: {
        &quot;hasNextPage&quot;: false,
        &quot;endCursor&quot;: &quot;T18z&quot;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is also possible to scroll through the data backwards by using the defined &lt;code&gt;last&lt;/code&gt; and &lt;code&gt;before&lt;/code&gt; parameters.
Also, it is completely valid to combine this scrolling with the already known features of query by example
and define a query in the GraphQL schema that also accepts fields of the &lt;code&gt;Account&lt;/code&gt; as filter criteria.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Filter with pagination&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;accountScroll(username:String, first: Int, after: String, last: Int, before:String): AccountConnection
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Let&apos;s federate&lt;/h2&gt;
&lt;p&gt;One of the big advantages in using GraphQL is the option to introduce federated data.
In a nutshell this means that data stored, e.g. in the database of the application, can be enriched, like in this case,
with data from a remote system / microservice / &lt;you name it&gt;.
In the end, the data will get presented via the GraphQL surface as one entity.
The consumer should not need to care about that multiple systems assembled this result.&lt;/p&gt;
&lt;p&gt;This data federation can be implemented by making use of the already defined controller.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SchemaMapping for federated data&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@Controller
class AccountController {

    @SchemaMapping
    String lastMessage(Account account) {
        var id = account.getId();
        String serverUri = account.getServer().getUri();

        WebClient webClient = WebClient.builder()
                        .baseUrl(&quot;https://&quot; + serverUri)
                        .build();

        return webClient.get()
                        .uri(&quot;/api/v1/accounts/{id}/statuses?limit=1&quot;, id)
                        .exchangeToMono(clientResponse -&gt;
                            clientResponse.statusCode().equals(HttpStatus.OK)
                            ? clientResponse
                                    .bodyToMono(String.class)
                                    .map(AccountController::extractData)
                            : Mono.just(&quot;could not retrieve last status&quot;)
                        )
                        .block();
    }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Adding the field &lt;code&gt;lastMessage&lt;/code&gt; to the &lt;code&gt;Account&lt;/code&gt; in the schema and restarting the application,
gives now the option to query for the accounts with this additional information.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Query with federated data&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  accounts {
    username
    lastMessage
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Response with federated data&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;data&quot;: {
    &quot;accounts&quot;: [
      {
        &quot;username&quot;: &quot;meistermeier&quot;,
        &quot;lastMessage&quot;: &quot;@taseroth erst einmal schauen, ob auf die Aussage auch Taten folgen ;)&quot;
      },
      {
        &quot;username&quot;: &quot;odrotbohm&quot;,
        &quot;lastMessage&quot;: &quot;Some #jMoleculesp/#SpringCLI integration cooking to easily add the former[...]&quot;
      },
      {
        &quot;username&quot;: &quot;rotnroll666&quot;,
        &quot;lastMessage&quot;: &quot;Werd aber das Rad im Rückwärts-Turbo schon irgendwie vermissen.&quot;
      }
    ]
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Looking at the controller again, it becomes clear that the retrieval of the data is quite a bottleneck right now.
For every &lt;code&gt;Account&lt;/code&gt; a request gets issued after another.
But Spring for GraphQL helps to improve the situation of the ordered requests for each &lt;code&gt;Account&lt;/code&gt; after another.
The solution is to use &lt;a href=&quot;https://docs.spring.io/spring-graphql/docs/current/reference/html/#controllers.batch-mapping&quot;&gt;&lt;code&gt;@BatchMapping&lt;/code&gt;&lt;/a&gt; on the &lt;em&gt;lastMessage&lt;/em&gt; field in contrast to &lt;code&gt;@SchemaMapping&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BatchMapping for federated data&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@Controller
public class AccountController {
	@BatchMapping
	public Flux&amp;#x3C;String&gt; lastMessage(List&amp;#x3C;Account&gt; accounts) {
		return Flux.concat(
			accounts.stream().map(account -&gt; {
				var id = account.getId();
				String serverUri = account.getServer().getUri();

				WebClient webClient = WebClient.builder()
						.baseUrl(&quot;https://&quot; + serverUri)
						.build();

				return webClient.get()
						.uri(&quot;/api/v1/accounts/{id}/statuses?limit=1&quot;, id)
						.exchangeToMono(clientResponse -&gt;
								clientResponse.statusCode().equals(HttpStatus.OK)
								? clientResponse
									.bodyToMono(String.class)
									.map(AccountController::extractData)
								: Mono.just(&quot;could not retrieve last status&quot;)
						);
		}).toList());
	}

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To improve this situation even more, it is recommended to also introduce proper caching to the result.
It might not be necessary that the federated data gets fetched on every request but only refreshed after a certain period.&lt;/p&gt;
&lt;h2&gt;Testing and test data&lt;/h2&gt;
&lt;h3&gt;Neo4j-Migrations&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://michael-simons.github.io/neo4j-migrations/&quot;&gt;Neo4j-Migrations&lt;/a&gt; is a project that applies migrations to Neo4j.
To be sure that always a clean state of the data is present in the database, an initial Cypher statement is provided.
It has the same content as the Cypher snippet in the beginning of this post.
In fact, the content is included directly from this file.&lt;/p&gt;
&lt;p&gt;Putting Neo4j-Migrations on the classpath by providing the Spring Boot starter,
it will run all migrations from the default folder (&lt;em&gt;resources/neo4j/migrations&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Neo4j-Migrations dependency definition&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;#x3C;dependency&gt;
    &amp;#x3C;groupId&gt;eu.michael-simons.neo4j&amp;#x3C;/groupId&gt;
    &amp;#x3C;artifactId&gt;neo4j-migrations-spring-boot-starter&amp;#x3C;/artifactId&gt;
    &amp;#x3C;version&gt;${neo4j-migrations.version}&amp;#x3C;/version&gt;
    &amp;#x3C;scope&gt;test&amp;#x3C;/scope&gt;
&amp;#x3C;/dependency&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Testcontainers&lt;/h3&gt;
&lt;p&gt;Spring Boot 3.1 comes with a new features for &lt;a href=&quot;https://testcontainers.org&quot;&gt;Testcontainers&lt;/a&gt;.
One of this feature is the automatic setting of properties without the need to define &lt;code&gt;@DynamicPropertySource&lt;/code&gt;.
The (to Spring Boot known) properties will get populated at test execution time after the container has started.&lt;/p&gt;
&lt;p&gt;First the dependency definition for &lt;a href=&quot;https://testcontainers.com/modules/neo4j/&quot;&gt;Testcontainers Neo4j&lt;/a&gt; is needed in our &lt;em&gt;pom.xml&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Testcontainers dependency definition&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-xml&quot;&gt;&amp;#x3C;dependency&gt;
    &amp;#x3C;groupId&gt;org.testcontainers&amp;#x3C;/groupId&gt;
    &amp;#x3C;artifactId&gt;neo4j&amp;#x3C;/artifactId&gt;
    &amp;#x3C;scope&gt;test&amp;#x3C;/scope&gt;
&amp;#x3C;/dependency&gt;

&amp;#x3C;dependency&gt;
    &amp;#x3C;groupId&gt;org.testcontainers&amp;#x3C;/groupId&gt;
    &amp;#x3C;artifactId&gt;junit-jupiter&amp;#x3C;/artifactId&gt;
    &amp;#x3C;scope&gt;test&amp;#x3C;/scope&gt;
&amp;#x3C;/dependency&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To make use of Testcontainers Neo4j, a container definition &lt;em&gt;interface&lt;/em&gt; will be created.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Container configuration&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;interface Neo4jContainerConfiguration {

    @Container
    @ServiceConnection
    Neo4jContainer&amp;#x3C;?&gt; neo4jContainer = new Neo4jContainer&amp;#x3C;&gt;(DockerImageName.parse(&quot;neo4j:5&quot;))
            .withRandomPassword()
            .withReuse(true);

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This can then be used with the &lt;code&gt;@ImportTestContainers&lt;/code&gt; annotation in the (integration) test class.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Test annotated with &lt;code&gt;@ImportTestContainers&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@SpringBootTest
@ImportTestcontainers(Neo4jContainerConfiguration.class)
class Neo4jGraphqlApplicationTests {

    final GraphQlTester graphQlTester;

    @Autowired
    public Neo4jGraphqlApplicationTests(ExecutionGraphQlService graphQlService) {
        this.graphQlTester = ExecutionGraphQlServiceTester.builder(graphQlService).build();
    }

    @Test
    void resultMatchesExpectation() {
        String query = &quot;{&quot; +
                &quot;  account(username:\&quot;meistermeier\&quot;) {&quot; +
                &quot;    displayName&quot; +
                &quot;  }&quot; +
                &quot;}&quot;;

        this.graphQlTester.document(query)
                .execute()
                .path(&quot;account&quot;)
                .matchesJson(&quot;[{\&quot;displayName\&quot;:\&quot;Gerrit Meier\&quot;}]&quot;);

    }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For completeness this test class also includes the &lt;code&gt;GraphQlTester&lt;/code&gt; and an example how to test the application&apos;s GraphQL API.&lt;/p&gt;
&lt;h3&gt;Testcontainers at development time&lt;/h3&gt;
&lt;p&gt;It is also now possible to run the whole application directly from the test folder and use a Testcontainers image.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Application start with container from test class&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@TestConfiguration(proxyBeanMethods = false)
class TestNeo4jGraphqlApplication {

	public static void main(String[] args) {
		SpringApplication.from(Neo4jGraphqlApplication::main)
				.with(TestNeo4jGraphqlApplication.class)
				.run(args);
	}

	@Bean
	@ServiceConnection
	Neo4jContainer&amp;#x3C;?&gt; neo4jContainer() {
		return new Neo4jContainer&amp;#x3C;&gt;(&quot;neo4j:5&quot;).withRandomPassword();
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;@ServiceConnection&lt;/code&gt; annotation also takes care that the application started from the test class knows
the coordinates the container is running at (connection string, username, password...).&lt;/p&gt;
&lt;p&gt;To start the application outside the IDE, it is now also possible to invoke &lt;code&gt;./mvnw spring-boot:test-run&lt;/code&gt;.
If there is only one class with a main method in the test folder, it will get started.&lt;/p&gt;
&lt;h2&gt;Topics left out / Try it&lt;/h2&gt;
&lt;p&gt;In parallel to the &lt;code&gt;QueryByExampleExecutor&lt;/code&gt;, support for &lt;code&gt;QuerydslPredicateExecutor&lt;/code&gt; exists in the Spring Data Neo4j module.
To make use of it, the repository needs to extend the &lt;code&gt;CrudRepository&lt;/code&gt; instead of the &lt;code&gt;Neo4jRepository&lt;/code&gt; and also declare it
as a &lt;code&gt;QuerydslPredicateExecutor&lt;/code&gt; for the given type.
Adding support for scrolling/pagination would require to also add the &lt;code&gt;QuerydslDataFetcher.QuerydslBuilderCustomizer&lt;/code&gt; and implement its &lt;code&gt;customize&lt;/code&gt; method.&lt;/p&gt;
&lt;p&gt;The whole infrastructure presented in this blog post is also available for the reactive stack.
Basically prefixing everything with &lt;code&gt;Reactive...&lt;/code&gt; (like &lt;code&gt;ReactiveQuerybyExampleExecutor&lt;/code&gt;) will turn this into a reactive application.&lt;/p&gt;
&lt;p&gt;Last but not least, the scroll mechanism used here is based on an &lt;code&gt;OffsetScrollPosition&lt;/code&gt;.
There is also a &lt;a href=&quot;https://docs.spring.io/spring-graphql/docs/current/reference/html/#data.pagination.scroll.keyset&quot;&gt;&lt;code&gt;KeysetScrollPosition&lt;/code&gt;&lt;/a&gt; that can be used.
It makes use of the sort property/properties in combination with the defined id.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@Override
default QueryByExampleDataFetcher.Builder&amp;#x3C;Account, ?&gt; customize(QueryByExampleDataFetcher.Builder&amp;#x3C;Account, ?&gt; builder) {
	return builder.sortBy(Sort.by(&quot;username&quot;))
			.defaultScrollSubrange(new ScrollSubrange(ScrollPosition.keyset(), 1, true));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;It&apos;s nice to see how convenient methods in Spring Data modules do not only provide a broader accessibility for users&apos; use-cases,
but also get used by other Spring projects to reduce the amount of code that needs to be written.
This results in less maintenance for the existing code base and helps focussing on the business problem instead of infrastructure.&lt;/p&gt;
&lt;p&gt;This post got a little bit longer because I explicitly want to touch at least the surface on what is happening when a query gets invoked
without speaking just about the &lt;em&gt;automagical&lt;/em&gt; result.&lt;/p&gt;
&lt;p&gt;Please go ahead and explore more about what is possible and how the application behaves for different types of queries.
It is next to impossible to cover every topic and feature that is available within one blog post.&lt;/p&gt;
&lt;p&gt;Happy GraphQL coding and exploring. You can find the example project on GitHub at &lt;a href=&quot;https://github.com/meistermeier/spring-graphql-neo4j&quot;&gt;https://github.com/meistermeier/spring-graphql-neo4j&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[This Week in Spring - June 27th, 2023]]></title><link>https://spring.io/blog/2023/06/27/this-week-in-spring-june-27th-2023</link><guid isPermaLink="true">https://spring.io/blog/2023/06/27/this-week-in-spring-june-27th-2023</guid><dc:creator><![CDATA[Josh Long]]></dc:creator><pubDate>Tue, 27 Jun 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;Hi Spring fans! Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! This week I am in Seoul talking to developers about the latest-and-greatest in Spring Boot 3! There&apos;s so much great stuff coming, and so much great stuff already. There are a few things I&apos;m super excited about.&lt;/p&gt;
&lt;p&gt;First, yesterday I did a joint presentation with my friend the one the only the amazing Trustin Lee, creator of Netty and lead of the Armeria Project over at LINE corporation. LINE is a super popular social messaging application used a lot in Korea and in Japan. It was a ton of &lt;a href=&quot;https://pbs.twimg.com/media/FznQPxgWYAAMd0D?format=jpg&amp;#x26;name=large&quot;&gt;fun collaborating with, and copresenting with, him&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Next, I&apos;m elated that I&apos;m going to be presenting at the &lt;strong&gt;Seoul SpringOne Tour&lt;/strong&gt; on June 28th (tomorrow!), 2023! Come join me &lt;a href=&quot;https://connect.tanzu.vmware.com/Event_Spring_One_Tour_Q224_KR.html&quot;&gt;and we&apos;ll look at Spring Boot 3!&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Relatedly, I&apos;ll also  be doing a SpringOne Tour event in Singapore on July 4th at 09:30! Come join us and we&apos;ll see &lt;a href=&quot;https://connect.tanzu.vmware.com/SpringOne_Tour_SG_July.html&quot;&gt;how Spring Boot 3.1 and TAP take you to production faster&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Now then, we&apos;ve got  a lot to get into so let&apos;s dive right in!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2023/06/22/a-bootiful-podcast-micrometer-lead-tommy-ludwig-from-spring-io-2023&quot;&gt;A Bootiful Podcast: Micrometer lead Tommy Ludwig&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://jvwilge.github.io/en/2023/06/21/spring-docker-compose.html&quot;&gt;Automatically spin up a Docker Compose environment for your local and integration test environment with Spring Boot 3.1.0+&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2023/06/21/docker-compose-support-in-spring-boot-3-1&quot;&gt;Docker Compose Support in Spring Boot 3.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2023/06/23/improved-testcontainers-support-in-spring-boot-3-1&quot;&gt;Improved Testcontainers Support in Spring Boot 3.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://spring.io/blog/2023/06/23/spring-modulith-1-0-m1-released&quot;&gt;Spring Modulith 1.0 M1 released&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://kotlinlang.org/docs/jvm-get-started-spring-boot.html#join-the-community&quot;&gt;they updated the getting started with Spring Boot and Kotlin article here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;I love this blog on &lt;a href=&quot;https://auth0.com/blog/get-started-with-okta-spring-boot-starter/&quot;&gt;getting started with Spring Boot and Auth0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.baeldung.com/spring-boot-security-autoconfiguration&quot;&gt;Baeldung updated their Spring Boot Security Auto-configuration explainer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;This is kind of an interesting exercise: how to &lt;a href=&quot;https://medium.com/@dixitsatish34/spring-boot-how-to-implement-generic-webclient-for-all-ms-52b2c335efab&quot;&gt;implement a generic &lt;code&gt;WebClient&lt;/code&gt; for all microservices with Spring&apos;s &lt;code&gt;WebClient&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Jay Kim&apos;s got a nice blog looking at how to &lt;a href=&quot;https://jskim1991.medium.com/spring-boot-declarative-http-clients-in-spring-mvc-and-spring-webflux-3dd2645485c8&quot;&gt;use Spring Framework 6&apos;s new declarative HTTP clients &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Baeldung has a nice blog looking at how &lt;a href=&quot;https://www.baeldung.com/spring-boot-opentelemetry-setup&quot;&gt;to setup OpenTelemetry support in Spring Boot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Spring Modulith 1.0 M1 released]]></title><link>https://spring.io/blog/2023/06/23/spring-modulith-1-0-m1-released</link><guid isPermaLink="true">https://spring.io/blog/2023/06/23/spring-modulith-1-0-m1-released</guid><dc:creator><![CDATA[Oliver Drotbohm]]></dc:creator><pubDate>Fri, 23 Jun 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;I am happy to announce the release of Spring Modulith 1.0 M1. This is an important milestone for the project and the first step on the road to promote it from an experimental to an official Spring project. This means that we ship a couple of breaking changes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The group identifier is now &lt;code&gt;org.springframework.modulith&lt;/code&gt; (previously &lt;code&gt;org.springframework.experimental&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;The Spring Boot baseline of the project is 3.1 (previously 3.0).&lt;/li&gt;
&lt;li&gt;The name of the actuator endpoint exposing the application module structure is now &lt;code&gt;application-modules&lt;/code&gt; (previously &lt;code&gt;applicationmodules&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;The previously deprecated configuration properties in the JDBC-based event registry have been removed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Also, note that milestone releases need to be obtained from our Artifactory repository under &lt;a href=&quot;https://repo.spring.io/milestone&quot;&gt;https://repo.spring.io/milestone&lt;/a&gt;. The release also includes a couple of bug fixes and new features over 0.6, which can be found in the official &lt;a href=&quot;https://github.com/spring-projects/spring-modulith/releases/tag/1.0.0-M1&quot;&gt;change log&lt;/a&gt;. A comprehensive overview about the project can be found in the &lt;a href=&quot;https://docs.spring.io/spring-modulith/docs/1.0.0-M1/reference/html/&quot;&gt;reference documentation&lt;/a&gt;.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Improved Testcontainers Support in Spring Boot 3.1]]></title><link>https://spring.io/blog/2023/06/23/improved-testcontainers-support-in-spring-boot-3-1</link><guid isPermaLink="true">https://spring.io/blog/2023/06/23/improved-testcontainers-support-in-spring-boot-3-1</guid><dc:creator><![CDATA[Moritz Halbritter]]></dc:creator><pubDate>Fri, 23 Jun 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;There&apos;s been support for &lt;a href=&quot;https://testcontainers.com/&quot;&gt;Testcontainers&lt;/a&gt; in Spring Boot for some time now, and Spring Boot 3.1 improves it further.
But first, let&apos;s take a look at what Testcontainers is and how it&apos;s usually used.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Testcontainers is an open source framework for providing throwaway, lightweight instances of databases, message brokers, web browsers, or just about anything that can run in a Docker container.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you have used Testcontainers in the past, there&apos;s a high chance that you have been using them in integration tests:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@SpringBootTest
@Testcontainers
class MyIntegrationTests {

    @Container
    static Neo4jContainer&amp;#x3C;?&gt; neo4j = new Neo4jContainer&amp;#x3C;&gt;(&quot;neo4j:5&quot;);

    @Test
    void myTest() {
        // ...
    }

    @DynamicPropertySource
    static void neo4jProperties(DynamicPropertyRegistry registry) {
        registry.add(&quot;spring.neo4j.uri&quot;, neo4j::getBoltUrl);
    }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this integration test, a Neo4j database is started inside a Testcontainer, and a &lt;code&gt;@DynamicPropertySource&lt;/code&gt; is put in place to configure Spring Boot to use the Neo4j database running in the container.&lt;/p&gt;
&lt;p&gt;With Spring Boot 3.1, we&apos;ve added two new features related to Testcontainers.
Both of those features have been implemented on top of the &lt;code&gt;ConnectionDetails&lt;/code&gt; abstraction, which we &lt;a href=&quot;https://spring.io/blog/2023/06/19/spring-boot-31-connectiondetails-abstraction&quot;&gt;featured in a separate blog post&lt;/a&gt;.
In case you haven&apos;t read it, please do so now. The rest of this blog post will then make more sense.&lt;/p&gt;
&lt;p&gt;The first of the features makes integration testing with Testcontainers easier.
The new &lt;code&gt;@ServiceConnection&lt;/code&gt; annotation can be used on the container instance fields of your tests:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@SpringBootTest
@Testcontainers
class MyIntegrationTests {

    @Container
    @ServiceConnection
    static Neo4jContainer&amp;#x3C;?&gt; neo4j = new Neo4jContainer&amp;#x3C;&gt;(&quot;neo4j:5&quot;);

    @Test
    void myTest() {
        // ...
    }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This replaces the need for the &lt;code&gt;@DynamicPropertySource&lt;/code&gt; code, so you can just remove it.&lt;/p&gt;
&lt;p&gt;Under the covers, &lt;code&gt;@ServiceConnection&lt;/code&gt; discovers the type of container that is annotated and creates a &lt;code&gt;ConnectionDetails&lt;/code&gt; bean for it.
In our example, the bean would be a &lt;code&gt;Neo4jConnectionDetails&lt;/code&gt;.
The Spring Boot auto-configuration for Neo4j consumes this bean and configures the driver to connect to the Neo4j server running in the Testcontainer.
This &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/html/features.html#features.testing.testcontainers.service-connections&quot;&gt;works for many of the different container types supported by Testcontainers&lt;/a&gt;.
If you&apos;re using &lt;code&gt;GenericContainer&lt;/code&gt;, we&apos;ll take a look at the image name to infer the type of container.
If you&apos;re using a custom image whose name we don&apos;t recognize, you can use the &lt;code&gt;name&lt;/code&gt; attribute of the &lt;code&gt;@ServiceConnection&lt;/code&gt; annotation to point us in the right direction.&lt;/p&gt;
&lt;p&gt;Annotating the container fields with &lt;code&gt;@ServiceConnection&lt;/code&gt; has several advantages. First, you have to type less code.
Second, there&apos;s no more &quot;stringly&quot; typed coupling between your integration tests and the Spring Boot auto-configurations through the properties.
And third, you don&apos;t have to look up (or remember) the property names.&lt;/p&gt;
&lt;p&gt;We think this is quite a nifty feature and enough of a reason to upgrade to Spring Boot 3.1.
In case you&apos;re not convinced yet, let us show you another great feature: Testcontainers at development time.&lt;/p&gt;
&lt;h2&gt;Testcontainers at development time&lt;/h2&gt;
&lt;p&gt;Most applications need some kind of external service, for example, a PostgreSQL database, a Redis server, or a Zipkin backend.
Usually, these services are provided by either running some &lt;code&gt;docker run&lt;/code&gt; commands from the readme before touching the code, or you use something like Docker Compose (for which Spring Boot 3.1 &lt;a href=&quot;https://spring.io/blog/2023/06/21/docker-compose-support-in-spring-boot-3-1&quot;&gt;added some cool new features, too&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;With Testcontainers at development time, you now get another tool in your toolbox.
Why should you use Testcontainers only for integration tests?
Technically, nothing is stopping you from starting Testcontainers in your production code and then putting properties in place to connect to those containers.
This works right now, even with Spring Boot before 3.1.&lt;/p&gt;
&lt;p&gt;The downside of that approach is that you now need to have the Testcontainers dependency on your compile classpath, and there&apos;s a high chance that this dependency is then included in your fat JAR, too.
With Spring Boot 3.1, there&apos;s a better way: leave the Testcontainers dependency in the &lt;code&gt;test&lt;/code&gt; scope.
All you need to do is to create a new &lt;code&gt;main&lt;/code&gt; method inside your &lt;strong&gt;test&lt;/strong&gt; code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class TestMyApplication {

    public static void main(String[] args) {
        SpringApplication.from(MyApplication::main).run(args);
    }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This test-&lt;code&gt;main&lt;/code&gt; method uses the new &lt;code&gt;SpringApplication.from&lt;/code&gt; method to delegate to your &quot;real&quot; main method in production code.&lt;/p&gt;
&lt;p&gt;You can now create a &lt;code&gt;@TestConfiguration&lt;/code&gt; which defines beans for the Testcontainers you need while developing your application:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@TestConfiguration(proxyBeanMethods = false)
class MyContainersConfiguration {

    @Bean
    @ServiceConnection
    Neo4jContainer&amp;#x3C;?&gt; neo4jContainer() {
        return new Neo4jContainer&amp;#x3C;&gt;(&quot;neo4j:5&quot;);
    }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Please note that this bean method is annotated with &lt;code&gt;@ServiceConnection&lt;/code&gt; so that Spring Boot automatically establishes a connection to the service running in the container.
The lifecycle of this container is managed by Spring Boot. We start the container on application start-up and shut it down when the application is stopped.&lt;/p&gt;
&lt;p&gt;With that in place, go back to your test-&lt;code&gt;main&lt;/code&gt; method and point it to the newly created &lt;code&gt;@TestConfiguration&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;public class TestMyApplication {

    public static void main(String[] args) {
        SpringApplication.from(MyApplication::main)
            .with(MyContainersConfiguration.class)
            .run(args);
    }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can start this test-&lt;code&gt;main&lt;/code&gt; method from your IDE and the containers automatically start up and Spring Boot establishes connections to them.
You don&apos;t have to set any configuration properties, and Spring Boot makes sure to shut down the containers when your application is stopped.
If you prefer to run your application from the terminal, we&apos;ve got you covered there, too.
The Spring Boot plugins for Gradle and Maven learned to run this test-&lt;code&gt;main&lt;/code&gt; method.
With Gradle, it&apos;s &lt;code&gt;./gradlew bootTestRun&lt;/code&gt;, with Maven it&apos;s &lt;code&gt;./mvnw spring-boot:test-run&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One thing to note is that your containers shut down every time you restart your application, and with that, they lose their data.
This can be solved in two ways:
The first one is to use the Spring Boot devtools, and then annotate the bean methods for your container with &lt;code&gt;@RestartScope&lt;/code&gt;.
Such containers are &lt;strong&gt;not&lt;/strong&gt; restarted when devtools restarts your application.
That means you don&apos;t have to wait for container startup every time you change something in your application and the containers keep their data.&lt;/p&gt;
&lt;p&gt;The second way is a feature in Testcontainers named &lt;a href=&quot;https://java.testcontainers.org/features/reuse/&quot;&gt;reusable containers&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-java&quot;&gt;@TestConfiguration(proxyBeanMethods = false)
public class MyContainersConfiguration {

    @Bean
    @ServiceConnection
    public Neo4jContainer&amp;#x3C;?&gt; neo4jContainer() {
        return new Neo4jContainer&amp;#x3C;&gt;(&quot;neo4j:5&quot;).withReuse(true);
    }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Such containers are not stopped when the application is shut down.
This is an &lt;strong&gt;experimental&lt;/strong&gt; Testcontainers feature, so use it at your own risk.&lt;/p&gt;
&lt;p&gt;For completeness, here&apos;s the list of containers we support at the moment:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CassandraContainer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CouchbaseContainer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ElasticsearchContainer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GenericContainer&lt;/code&gt; using &lt;code&gt;redis&lt;/code&gt; or &lt;code&gt;openzipkin/zipkin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;JdbcDatabaseContainer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;KafkaContainer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MongoDBContainer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MariaDBContainer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MSSQLServerContainer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MySQLContainer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Neo4jContainer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OracleContainer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;PostgreSQLContainer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RabbitMQContainer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RedpandaContainer&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We hope you like these new features and that they&apos;ll help you write even more awesome applications.
Please read the &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#features.testing.testcontainers&quot;&gt;documentation&lt;/a&gt; to get started,
and if you find any problems or have ideas to improve this further, &lt;a href=&quot;https://github.com/spring-projects/spring-boot/issues&quot;&gt;please get in contact&lt;/a&gt;!&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Spring Boot 3.1.1 available now]]></title><link>https://spring.io/blog/2023/06/22/spring-boot-3-1-1-available-now</link><guid isPermaLink="true">https://spring.io/blog/2023/06/22/spring-boot-3-1-1-available-now</guid><dc:creator><![CDATA[Andy Wilkinson]]></dc:creator><pubDate>Thu, 22 Jun 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On behalf of the team and everyone who has contributed, I&apos;m happy to announce that Spring Boot &lt;code&gt;3.1.1&lt;/code&gt; has been released and is now available from Maven Central.&lt;/p&gt;
&lt;p&gt;This release includes &lt;a href=&quot;https://github.com/spring-projects/spring-boot/releases/tag/v3.1.1&quot;&gt;89 bug fixes, documentation improvements, and dependency upgrades&lt;/a&gt;. Thanks to all those who have contributed with issue reports and pull requests.&lt;/p&gt;
&lt;h3&gt;How can you help?&lt;/h3&gt;
&lt;p&gt;If you&apos;re interested in helping out, check out the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/labels/status%3A%20ideal-for-contribution&quot;&gt;&quot;ideal for contribution&quot; tag&lt;/a&gt; in the issue repository. If you have general questions, please ask on &lt;a href=&quot;https://stackoverflow.com&quot;&gt;stackoverflow.com&lt;/a&gt; using the &lt;a href=&quot;https://stackoverflow.com/tags/spring-boot&quot;&gt;&lt;code&gt;spring-boot&lt;/code&gt; tag&lt;/a&gt; or chat with the community on &lt;a href=&quot;https://gitter.im/spring-projects/spring-boot&quot;&gt;Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-boot/&quot;&gt;Project Page&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-boot&quot;&gt;GitHub&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-boot/issues&quot;&gt;Issues&lt;/a&gt; | &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/3.1.1/reference/html&quot;&gt;Documentation&lt;/a&gt; | &lt;a href=&quot;https://stackoverflow.com/questions/tagged/spring-boot&quot;&gt;Stack Overflow&lt;/a&gt; | &lt;a href=&quot;https://gitter.im/spring-projects/spring-boot&quot;&gt;Gitter&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Spring Boot 3.0.8 available now]]></title><link>https://spring.io/blog/2023/06/22/spring-boot-3-0-8-available-now</link><guid isPermaLink="true">https://spring.io/blog/2023/06/22/spring-boot-3-0-8-available-now</guid><dc:creator><![CDATA[Andy Wilkinson]]></dc:creator><pubDate>Thu, 22 Jun 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On behalf of the team and everyone who has contributed, I&apos;m happy to announce that Spring Boot &lt;code&gt;3.0.8&lt;/code&gt; has been released and is now available from Maven Central.&lt;/p&gt;
&lt;p&gt;This release includes &lt;a href=&quot;https://github.com/spring-projects/spring-boot/releases/tag/v3.0.8&quot;&gt;51 bug fixes, documentation improvements, and dependency upgrades&lt;/a&gt;. Thanks to all those who have contributed with issue reports and pull requests.&lt;/p&gt;
&lt;h3&gt;How can you help?&lt;/h3&gt;
&lt;p&gt;If you&apos;re interested in helping out, check out the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/labels/status%3A%20ideal-for-contribution&quot;&gt;&quot;ideal for contribution&quot; tag&lt;/a&gt; in the issue repository. If you have general questions, please ask on &lt;a href=&quot;https://stackoverflow.com&quot;&gt;stackoverflow.com&lt;/a&gt; using the &lt;a href=&quot;https://stackoverflow.com/tags/spring-boot&quot;&gt;&lt;code&gt;spring-boot&lt;/code&gt; tag&lt;/a&gt; or chat with the community on &lt;a href=&quot;https://gitter.im/spring-projects/spring-boot&quot;&gt;Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-boot/&quot;&gt;Project Page&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-boot&quot;&gt;GitHub&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-boot/issues&quot;&gt;Issues&lt;/a&gt; | &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/3.0.8/reference/html&quot;&gt;Documentation&lt;/a&gt; | &lt;a href=&quot;https://stackoverflow.com/questions/tagged/spring-boot&quot;&gt;Stack Overflow&lt;/a&gt; | &lt;a href=&quot;https://gitter.im/spring-projects/spring-boot&quot;&gt;Gitter&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Spring Boot 2.7.13 available now]]></title><link>https://spring.io/blog/2023/06/22/spring-boot-2-7-13-available-now</link><guid isPermaLink="true">https://spring.io/blog/2023/06/22/spring-boot-2-7-13-available-now</guid><dc:creator><![CDATA[Andy Wilkinson]]></dc:creator><pubDate>Thu, 22 Jun 2023 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;On behalf of the team and everyone who has contributed, I&apos;m happy to announce that Spring Boot &lt;code&gt;2.7.13&lt;/code&gt; has been released and is now available from Maven Central.&lt;/p&gt;
&lt;p&gt;This release includes &lt;a href=&quot;https://github.com/spring-projects/spring-boot/releases/tag/v2.7.13&quot;&gt;26 bug fixes, documentation improvements, and dependency upgrades&lt;/a&gt;. Thanks to all those who have contributed with issue reports and pull requests.&lt;/p&gt;
&lt;h3&gt;How can you help?&lt;/h3&gt;
&lt;p&gt;If you&apos;re interested in helping out, check out the &lt;a href=&quot;https://github.com/spring-projects/spring-boot/labels/status%3A%20ideal-for-contribution&quot;&gt;&quot;ideal for contribution&quot; tag&lt;/a&gt; in the issue repository. If you have general questions, please ask on &lt;a href=&quot;https://stackoverflow.com&quot;&gt;stackoverflow.com&lt;/a&gt; using the &lt;a href=&quot;https://stackoverflow.com/tags/spring-boot&quot;&gt;&lt;code&gt;spring-boot&lt;/code&gt; tag&lt;/a&gt; or chat with the community on &lt;a href=&quot;https://gitter.im/spring-projects/spring-boot&quot;&gt;Gitter&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://spring.io/projects/spring-boot/&quot;&gt;Project Page&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-boot&quot;&gt;GitHub&lt;/a&gt; | &lt;a href=&quot;https://github.com/spring-projects/spring-boot/issues&quot;&gt;Issues&lt;/a&gt; | &lt;a href=&quot;https://docs.spring.io/spring-boot/docs/2.7.13/reference/html&quot;&gt;Documentation&lt;/a&gt; | &lt;a href=&quot;https://stackoverflow.com/questions/tagged/spring-boot&quot;&gt;Stack Overflow&lt;/a&gt; | &lt;a href=&quot;https://gitter.im/spring-projects/spring-boot&quot;&gt;Gitter&lt;/a&gt;&lt;/p&gt;</content:encoded></item></channel></rss>